{"version":3,"file":"static/js/779.3ae66f3d.chunk.js","mappings":"8QAEaA,EAAOC,EAAAA,GAAAA,GAAH,8CAGJC,EAAOD,EAAAA,GAAAA,GAAH,6CAIJE,EAAOF,EAAAA,GAAAA,EAAH,0C,SC0BjB,EA9BgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qGACGC,EAAAA,EAAAA,IAAaP,GADhB,OACbQ,EADa,OAEjBJ,EAAeI,EAAQC,SAFN,2CAAH,qDAIhBH,GACD,GAAE,CAACN,IAECG,GAAqC,IAAtBA,EAAYO,OAK9B,SAACd,EAAD,UACGO,EAAYQ,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC9B,OACE,4BACE,UAAChB,EAAD,sBAAee,MACf,SAACd,EAAD,UAAOe,MAFCF,EAKb,OAZI,qEAeV,C,8LC/BDG,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAU,wBAAyB,CACxDG,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BV,GAA1B,uFACkBG,EAAAA,EAAAA,IAAA,mBAAsBH,GAAM,CACjDM,OAAQ,CACNC,QAASH,EACTO,SAAU,WAJT,cACCH,EADD,yBAQEA,EAASC,MARX,kEAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBZ,GAAzB,uFACkBG,EAAAA,EAAAA,IAAA,mBAAsBH,EAAtB,YAAoC,CACzDM,OAAQ,CACNC,QAASH,EACTO,SAAU,WAJT,cACCH,EADD,yBAQEA,EAASC,MARX,kEAWA,SAAed,EAAtB,+CAAO,OAAP,oBAAO,WAA4BK,GAA5B,uFACkBG,EAAAA,EAAAA,IAAA,mBAAsBH,EAAtB,YAAoC,CACzDM,OAAQ,CACNC,QAASH,EACTO,SAAU,WAJT,cACCH,EADD,yBAQEA,EAASC,MARX,kEAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACkBX,EAAAA,EAAAA,IAAA,kBAA6B,CAClDG,OAAQ,CACNC,QAASH,EACTO,SAAU,QACVI,MAAOD,KALN,cACCN,EADD,yBASEA,EAASC,MATX,kE","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 24px;\n`;\nexport const Item = styled.li`\n  font-weight: 500;\n`;\n\nexport const Text = styled.p`\n  padding: 12px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchReviews } from '../services/Api';\nimport { List, Item, Text } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsInfo, setReviewsInfo] = useState(null);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      let reviews = await fetchReviews(movieId);\n      setReviewsInfo(reviews.results);\n    };\n    getReviews();\n  }, [movieId]);\n\n  if (!reviewsInfo || reviewsInfo.count === 0) {\n    return <h2>We don't have any reviews for this movie.</h2>;\n  }\n\n  return (\n    <List>\n      {reviewsInfo.map(({ id, author, content }) => {\n        return (\n          <div key={id}>\n            <Item>Author: {author}</Item>\n            <Text>{content}</Text>\n          </div>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst API_KEY = 'fba338e92d7feb991f2d168ce8330321';\n\nexport async function fetchTrending() {\n  const response = await axios.get('/3/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchMovie(id) {\n  const response = await axios.get(`/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id) {\n  const response = await axios.get(`/3/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchReviews(id) {\n  const response = await axios.get(`/3/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchKeyWord(value) {\n  const response = await axios.get(`/3/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: value,\n    },\n  });\n\n  return response.data;\n}\n"],"names":["List","styled","Item","Text","movieId","useParams","useState","reviewsInfo","setReviewsInfo","useEffect","getReviews","fetchReviews","reviews","results","count","map","id","author","content","axios","API_KEY","fetchTrending","params","api_key","response","data","fetchMovie","language","fetchCast","fetchKeyWord","value","query"],"sourceRoot":""}